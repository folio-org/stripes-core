clone=n
build=n
dir=.
warning="⚠️ "
local=n
dirs=`echo '
    stripes-connect
    stripes-components
    stripes-smart-components
    stripes-react-hotkeys
    stripes-logger
    stripes-form
    stripes-core
    stripes-sample-platform
    stripes-demo-platform
    folio-testing-platform
    ui-users
    ui-inventory
    ui-eholdings
    ui-erm
    ui-checkin
    ui-checkout
    ui-circulation
    ui-organization
    ui-developer
    ui-calendar
    ui-plugin-example
    ui-plugin-find-user
    ui-requests
    ui-search
    ui-testing
    ui-trivial
    ui-vendors
    ui-tags
    ui-myprofile
    ui-servicepoints
    eslint-config-stripes
'`

if [ "$TERM" = dumb ]; then
    warning="***"
fi

if [ "x$1" = x-c ]; then
    clone=y
    shift
fi

if [ "x$1" = x-b ]; then
    build=y
    shift
fi

if [ "x$1" = x-l ]; then
    local=y
    shift
fi

if [ $# != 0 ]; then
    echo Running in directory $1
    cd $1
fi


cd $dir

# when "local" is "y", iterate over locally-cloned modules instead of
# over a hard-coded list. this is useful when only a few modules are
# checked out for update and the rest are pulled in via yarn/npm as
# regular dependencies.
# obviously, assignment to $dirs is not super smart; it assumes your
# working directory is clean of stuff aside from, well, cloned modules
# that you are actually working on.
if [ $local = y ]; then
    dirs=`ls | grep -v node_modules`
fi


if [ $clone = y ]; then
    echo "$0: cloning"
    for i in $dirs; do
        if [ -d $i ]; then
            echo "$warning skipping '$i': aleady exists"
        else
            git clone https://github.com/folio-org/$i
        fi
    done
    exit
fi

for i in $dirs; do
    if [[ -d $i && -d $i/.git ]]; then
        (
            cd $i
            branch=`git branch | sed -n 's/^\* //p'`
            echo "=== $i ($branch) ==="
            if [ "x$branch" != xmaster -a "x$branch" != xdev -a "x$branch" != x`whoami` ]; then
                echo "$warning on branch '$branch': doing nothing"
            else
                if git status | grep 'nothing to commit' > /dev/null; then
                    if git status | grep 'Your branch is ahead' > /dev/null; then
                        echo "$warning some committed changes to push: doing nothing"
                    else
                        git pull
                    fi
                else
                    echo "$warning some changes to commit: doing nothing"
                fi
            fi
        )
    elif [ -d $i ]; then
        echo "=== $i ==="
        echo "$warning '$i' is not a git repository"
    else [ ! -d $i ];
        echo "=== $i ==="
        echo "$warning '$i' does not exist"
    fi
done

# use yarn workspaces to handle shared libraries more efficiently
# https://yarnpkg.com/lang/en/docs/workspaces/
if [ $build = y ]; then
    if [ ! -f ./package.json ]; then
        echo "$0: creating workspace package.json"
        `echo '{
    "private": true,
    "workspaces": [
        "stripes-*",
        "ui-*"
    ],
    "dependencies": {
    }
}
' > package.json`
    else
        echo "workspace package.json file already exists..."
    fi

    yarn
fi
